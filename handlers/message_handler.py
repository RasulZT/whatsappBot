import asyncio

import aiohttp

from config import *
import requests
import websockets
import json
import os

from core.utils import send_interactive_message_async
from handlers.order_handler import handle_order_update, handle_order_create

USERS_JSON_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "users.json")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_ws_messages(websocket, ws_name):
    while True:
        # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞
        response = await websocket.recv()

        # –ü—Ä–∏–Ω—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å WebSocket
        print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", response)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "{}"
        if response == "{}":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await websocket.send("{}")
            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {}")

        else:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ JSON
                response_data = json.loads(response)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'push' –≤ –æ—Ç–≤–µ—Ç–µ
                if "push" in response_data:
                    push_data = response_data["push"]
                    print(f"[{ws_name}] –ü–æ–ª—É—á–µ–Ω–æ push-—Å–æ–æ–±—â–µ–Ω–∏–µ: {push_data}")

                    if "pub" in push_data and "data" in push_data["pub"]:
                        message_data = push_data["pub"]["data"]
                        print(f"[{ws_name}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: {message_data}")

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                        await process_message(ws_name, message_data)

                else:
                    print(f"[{ws_name}] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'push'.")
                    await process_message(ws_name, response_data)

            except websockets.ConnectionClosed:
                print(f"[{ws_name}] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
                break
            except json.JSONDecodeError:
                print(f"[{ws_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON.")
            except Exception as e:
                print(f"[{ws_name}] –û—à–∏–±–∫–∞: {e}")


async def process_message(ws_name, message_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
    if ws_name == "ws_hotkey":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ WebSocket
        if "chat" in message_data and "message" in message_data:
            print(f"Message_data:{message_data}")
            chat_id = message_data["chat"]["id"]
            message = message_data["message"]["message_preview"]
            message_payload=message_data["message"]["message_payload"]
            phone_number = message_data["chat"]["customer"]["phone_number"]
            full_name = message_data["chat"]["customer"]["full_name"]

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö –∏–ª–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if message_data["message"]["system_type"] == "incoming":
                await check_and_send_message(chat_id, message, full_name, phone_number,message_payload)
            else:
                print(f"[{ws_name}] –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ.")

    elif ws_name == "ws_back_status":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ WebSocketw
        print(f"[{ws_name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}")
        await handle_order_update(message_data)

    elif ws_name == "ws_back_newOrder":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ WebSocket
        print(f"[{ws_name}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_data}")
        await  handle_order_create(message_data)

    else:
        print(f"[{ws_name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è.")


async def send_start_message(chat_id, message, full_name, phone_number):
    url = f"{API_URL}chat/{chat_id}/send-message"
    headers = {
        'Authorization': f'Bearer {Bearer_token}',  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        'Content-Type': 'application/json'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }
    payload = {
        "type": "interactive",
        "message": {
            "type": "button",
            "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–∏—Ü—Ü—ã –∏ —Å—É—à–∏ üçïüç£. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ‚¨áÔ∏è",
            "buttons": [
                {
                    "type": "reply",
                    "id": "menu",
                    "title": "–ú–µ–Ω—é"
                },
                {
                    "type": "reply",
                    "id": "commands",
                    "title": "–ö–æ–º–∞–Ω–¥—ã"
                }
            ]
        }
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            if response.status == 200:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status}")
                print(await response.text())


async def send_menu_message(chat_id, message, full_name, phone_number):
    url = f"{API_URL}chat/{chat_id}/send-message"

    headers = {
        'Authorization': f'Bearer {Bearer_token}',  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        'Content-Type': 'application/json'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }

    payload = {
        "type": "interactive",
        "message": {
            "type": "cta_url",
            "header": "–ú–µ–Ω—é",
            "text": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ú–µ–Ω—é",
            "cta": {
                "text": "–û—Ç–∫—Ä—ã—Ç—å –ú–µ–Ω—é",
                "url": f"https://ws.monopizza.kz/?telegram_id={chat_id}&phone={phone_number}&name={full_name}"
            }
        }
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            if response.status == 200:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status}")
                print(await response.text())


async def send_manager_message(chat_id, message, full_name, phone_number):
    url = f"{API_URL}chat/{chat_id}/send-message"

    headers = {
        'Authorization': f'Bearer {Bearer_token}',  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        'Content-Type': 'application/json'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }

    payload = {
        "type": "interactive",
        "message": {
            "type": "cta_url",
            "header": "–ú—ç–Ω–µ–¥–∂–µ—Ä",
            "text": "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º—ç–Ω–µ–¥–∂–µ—Ä–æ–º‚¨áÔ∏è",
            "footer": "TEST>",
            "cta": {
                "text": "–ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ Whatsapp",
                "url": "https://ws.monopizza.kz/wa/77021366697"
            }
        }
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            if response.status == 200:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status}")
                print(await response.text())


async def send_orderInfo_message(chat_id, message, full_name, phone_number):
    url = f"{API_URL}chat/{chat_id}/send-message"

    headers = {
        'Authorization': f'Bearer {Bearer_token}',  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        'Content-Type': 'application/json'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }

    payload = {
        "type": "interactive",
        "message": {
            "type": "cta_url",
            "header": "–í–∞—à –∑–∞–∫–∞–∑",
            "text": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏",
            "footer": "TEST>",
            "cta": {
                "text": "Click",
                "url": f"https://ws.monopizza.kz/?telegram_id={chat_id}&order_id=64"
            }
        }
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            if response.status == 200:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status}")
                print(await response.text())


async def send_start_message_existing(chat_id, message, full_name, phone_number):
    url = f"{API_URL}chat/{chat_id}/send-message"
    headers = {
        'Authorization': f'Bearer {Bearer_token}',  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        'Content-Type': 'application/json'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    }

    payload = payload = {
        "type": "interactive",
        "message": {
            "type": "button",
            "text": f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º {full_name}! –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ –Ω–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ‚¨áÔ∏è",
            "buttons": [
                {
                    "type": "reply",
                    "id": "menu",
                    "title": "–ú–µ–Ω—é"
                },
                {
                    "type": "reply",
                    "id": "commands",
                    "title": "–ö–æ–º–∞–Ω–¥—ã"
                }
            ]
        }
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as response:
            if response.status == 200:
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status}")
                print(await response.text())


async def check_and_send_message(chat_id, message, full_name, phone_number,message_payload):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API –∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    user_data = {
        "telegram_id": chat_id,
        "telegram_fullname": full_name,
        "phone": phone_number
    }
    print(f"Chat_id: {chat_id}")
    print(f"Message:{message}")
    print(f"Message_payload:{message_payload}")
    if message == "–ö–æ–º–∞–Ω–¥—ã" or message == "–∫–æ–º–∞–Ω–¥—ã":

        await send_interactive_message_async(
            api_url=f"{API_URL}chat/{chat_id}/send-message",
            access_token=Bearer_token,
            chat_id=chat_id
        )
    elif message == "–ú–µ–Ω—é":
        await send_menu_message(chat_id, "", full_name, phone_number)

    elif message == "–ú—ç–Ω–µ–¥–∂–µ—Ä":

        await send_manager_message(chat_id, "", full_name, phone_number)

    elif message == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö":

        await send_orderInfo_message(chat_id, "", full_name, phone_number)

    else:
        async with aiohttp.ClientSession() as session:
            try:
                # POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                async with session.post(f"{BACKEND_URL}auth/register/", json=user_data) as response:
                    if response.status == 201:
                        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await send_start_message(chat_id, "", full_name, phone_number)

                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        await asyncio.sleep(1)


                    elif response.status == 200:
                        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                        await send_start_message_existing(chat_id, "", full_name, phone_number)


                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –Ω–µ 201
                        error_message = await response.text()
                        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status}, {error_message}")
                        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        # await send_error_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞: {response.status}")

            except aiohttp.ClientError as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                # await send_error_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
